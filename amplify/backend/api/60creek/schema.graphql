type schema {
  query: Query
  mutation: Mutation
}

type Query {
  user(id: ID): User
  prospectList: ProspectList
  prospect: Prospect
  paymentMethod: PaymentMethod
  marketingCampaign: MarketingCampaign

  subscriptionInfo: SubscriptionInfoResult
    @function(name: "subscriptionInfo-${env}")
}

type Mutation {
  user(
    id: ID
    firstName: String
    lastName: String
    company: String
    address1: String
    address2: String
    city: String
    state: String
    zip: String
    phone: String
    email: String
    signature: String
  ): User
  prospectList(id: ID, name: String, owningUserId: Int): ProspectList
  prospect(
    id: ID
    prospectListId: Int
    firstName: String
    lastName: String
    company: String
    address1: String
    address2: String
    city: String
    state: String
    zip: String
    phone: String
    email: String
    facebook: String
    owningUserId: Int
  ): Prospect
  paymentMethod(
    id: ID
    userId: Int
    title: String
    stripeInfo: String
    name: String
    email: String
    phone: String
  ): PaymentMethod
  marketingCampaign(
    id: ID
    title: String
    prospectListId: Int
    startDateTime: String
    autmatedEmail: Boolean
    automatedText: Boolean
    automatedRinglessVoiceMail: Boolean
    automatedPostcard: Boolean
    paymentMethodId: Int
    consent: Boolean
    owningUserId: Int
  ): MarketingCampaign
  deletedUser(id: ID!): User
  deletedProspectLists(id: ID!): ProspectList
  deletedProspect(id: ID!): Prospect
  deletedPaymentMethod(id: ID!): PaymentMethod
  deletedMarketingCampaign(id: ID!): MarketingCampaign
  createStripeSubscription(
    input: CreateStripeSubscriptionInput
  ): PaymentMethodResult @function(name: "createStripeSubscription-${env}")
  validatePromoCode(input: ValidatePromoCodeInput): ValidatePromoCodeResult
    @function(name: "validatePromoCode-${env}")
}
type Recurring {
  aggregate_usage: String
  interval: String
  interval_count: Int
  usage_type: String
}

type SubscriptionInfo {
  id: String
  object: String
  active: Boolean
  billing_scheme: String
  created: Int
  currency: String
  livemode: Boolean
  lookup_key: String
  metadata: String
  nickname: String
  product: String
  recurring: Recurring
  tiers_mode: String
  transform_quantity: String
  type: String
  unit_amount: Int
  unit_amount_decimal: String
}

type SubscriptionInfoResult {
  data: SubscriptionInfo
  error: ErrorResponse
}
type CouponInfo {
  id: String
  object: String
  amount_off: Int
  created: Int
  currency: String
  duration: String
  duration_in_months: Int
  livemode: Boolean
  max_redemptions: Int
  name: String
  percent_off: Float
  redeem_by: Int
  times_redeemed: Int
  valid: Boolean
}
type ValidatePromoCodeResult {
  data: CouponInfo
  error: ErrorResponse
}
input CreateStripeSubscriptionInput {
  paymentMethodId: String
  email: String
  coupon: String
}
input ValidatePromoCodeInput {
  coupon: String
}
type User @model @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  cognitoUserName: String!
  firstName: String
  lastName: String
  company: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  signature: String
}

type Prospect
  @model
  @key(name: "byProspectList", fields: ["prospectListId"])
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  userId: ID!
  prospectListId: ID!
  status: String
  firstName: String
  lastName: String
  company: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  facebook: String
  prospectList: ProspectList @connection(fields: ["prospectListId"])
}

type ProspectList
  @model
  @key(name: "byUser", fields: ["userId"])
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  userId: ID!
  name: String
  enhance: Boolean
}

type ErrorResponse {
  message: String
}
type PaymentMethodData {
  address: String
  name: String
  email: String
  phone: String

  paymentMethodId: String
  subscriptionId: String
  customerId: String
  subscriptionType: String
  discount: Int
  unitAmount: Int
}
type PaymentMethodResult {
  data: PaymentMethodData
  error: ErrorResponse
}

type PaymentMethod @model @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  address: String
  name: String
  email: String
  phone: String

  paymentMethodId: String
  subscriptionId: String
  customerId: String
  cardType: String
  expMonth: Int
  expYear: Int
  last4: String
  subscriptionType: String
  discount: String
  unitAmount: Int
}

type MarketingCampaign
  @model
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  title: String
  prospectListId: Int
  startDateTime: String
  autmatedEmail: Boolean
  automatedText: Boolean
  automatedRinglessVoiceMail: Boolean
  automatedPostcard: Boolean
  paymentMethodId: Int
  consent: Boolean
  owningUserId: Int
}
