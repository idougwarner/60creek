type schema {
  query: Query
  mutation: Mutation
}
type Query {
  prospectList: ProspectList
  prospect: Prospect
  paymentMethod: PaymentMethod
  marketingCampaign: MarketingCampaign
  subscriptionInfo: SubscriptionInfoResult
    @function(name: "subscriptionInfo-${env}")
}
type ModelProspectConnection {
  items: [Prospect]
  nextToken: String
  scannedCount: Int
  count: Int
}
type Mutation {
  user(
    id: ID
    firstName: String
    lastName: String
    company: String
    address1: String
    address2: String
    city: String
    state: String
    zip: String
    phone: String
    email: String
    signature: String
  ): User
  prospectList(id: ID, name: String, owningUserId: Int): ProspectList
  prospect(
    id: ID
    prospectListId: Int
    firstName: String
    lastName: String
    company: String
    address1: String
    address2: String
    city: String
    state: String
    zip: String
    phone: String
    email: String
    facebook: String
    owningUserId: Int
  ): Prospect
  paymentMethod(
    id: ID
    userId: Int
    title: String
    stripeInfo: String
    name: String
    email: String
    phone: String
  ): PaymentMethod
  marketingCampaign(
    id: ID
    title: String
    prospectListId: Int
    startDateTime: String
    autmatedEmail: Boolean
    automatedText: Boolean
    automatedRinglessVoiceMail: Boolean
    automatedPostcard: Boolean
    paymentMethodId: Int
    consent: Boolean
    owningUserId: Int
  ): MarketingCampaign
  deletedUser(id: ID!): User
  deletedProspectLists(id: ID!): ProspectList
  deletedProspect(id: ID!): Prospect
  deletedPaymentMethod(id: ID!): PaymentMethod
  deletedMarketingCampaign(id: ID!): MarketingCampaign
  createStripeSubscription(
    input: CreateStripeSubscriptionInput
  ): PaymentMethodResult @function(name: "createStripeSubscription-${env}")
  validatePromoCode(input: ValidatePromoCodeInput): ValidatePromoCodeResult
    @function(name: "validatePromoCode-${env}")
  checkout(input: CheckoutInput): CheckoutResult
    @function(name: "checkout-${env}")
  getConsumerContactInfo(
    input: GetConsumerContactInfoInput
  ): GetConsumerContactInfoResult
    @function(name: "getConsumerContactInfo-${env}")
  getDemographicInfo(
    input: GetConsumerContactInfoInput
  ): GetDemographicInfoResult @function(name: "getDemographicInfo-${env}")
  getLifestyleInfo(input: GetConsumerContactInfoInput): GetLifestyleInfoResult
    @function(name: "getLifestyleInfo-${env}")
  sendCampaignConfirmEmail(
    input: SendCampaignConfirmEmailInput
  ): SendCampaignConfirmEmailResult
    @function(name: "sendCampaignConfirmEmail-${env}")
  requestPasswordReset(
    input: RequestPasswordResetInput
  ): RequestPasswordResetResult @function(name: "requestPasswordReset-${env}")
  resetPassword(input: ResetPasswordInput): ResetPasswordResult
    @function(name: "resetPassword-${env}")

  changeEmail(input: ChangeEmailInput): ChangeEmailResult
    @function(name: "changeEmail-${env}")
}

input ChangeEmailInput {
  userId: String
  email: String
  cognitoUserName: String
}

type ChangeEmailResult {
  data: String
  error: ErrorResponse
}
input ResetPasswordInput {
  token: String
  password: String
}
type ResetPasswordResult {
  data: String
  error: ErrorResponse
}
input RequestPasswordResetInput {
  email: String
  link: String
}
type RequestPasswordResetResult {
  data: String
  error: ErrorResponse
}
input AutomatedItem {
  title: String
  total: String
  price: String
  prospects: Int
}
input EmailData {
  prospectList: String
  startDate: String
  startTime: String
  items: [AutomatedItem]
  brand: String
  last4: String
  total: String
  link: String
}
input SendCampaignConfirmEmailInput {
  emailData: EmailData
  email: String
  name: String
  campaignId: String
}
type SendCampaignConfirmEmailResult {
  data: String
  error: ErrorResponse
}
input CheckoutInput {
  email: String
  amount: Float
  token: String
  description: String
}
input GetConsumerContactInfoInput {
  email: String
}
type CheckoutResult {
  data: CheckoutInfo
  error: ErrorResponse
}
type CheckoutInfo {
  id: String
  amount: Float
  amountCaptured: Float
  amountRefunded: Float
  description: String
  paid: Boolean
  receiptEmail: String
  receiptNumber: String
  receiptUrl: String
  source: String
  status: String
}
type LifestyleInfo {
  magazines: String
  computerAndTechnology: String
  dietingWeightLoss: String
  exerciseHealthGrouping: String
  doItYourselferHomeImprovement: String
  jewelry: String
  mailOrderBuyer: String
  membershipClubs: String
  travelGrouping: String
  onlineEducation: String
  sportsGrouping: String
  sportsOutdoorsGrouping: String
  investing: String
  booksAndReading: String
  politicalDonor: String
  hobbiesAndCrafts: String
  cosmetics: String
  charitableDonations: String
  artsAntiquesCollectibles: String
  petOwner: String
  cooking: String
  autoPartsAccessories: String
  healthBeautyWellness: String
  parentingAndChildrensProducts: String
  music: String
  movie: String
  selfImprovement: String
  womensApparel: String
}
type DemographicInfo {
  DOB: String
  ageRange: String
  ethnicCode: String
  singleParent: String
  seniorAdultInHousehold: String
  youngAdultInHousehold: String
  workingWoman: String
  SOHOIndicator: String
  businessOwner: String
  language: String
  religion: String
  numberOfChildren: String
  maritalStatusInHousehold: String
  homeOwnerRenter: String
  education: String
  occupation: String
  occupationDetail: String
  gender: String
  socialPresence: String
  presenceOfChildren: String
}
type GetConsumerContactInfoResult {
  data: ConsumerContactInfo
  error: ErrorResponse
}
type GetDemographicInfoResult {
  data: DemographicInfo
  error: ErrorResponse
}
type GetLifestyleInfoResult {
  data: LifestyleInfo
  error: ErrorResponse
}
type ConsumerContactInfo {
  firstName: String
  lastName: String
  address1: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
}
type Recurring {
  aggregate_usage: String
  interval: String
  interval_count: Int
  usage_type: String
}
type SubscriptionInfo {
  id: String
  object: String
  active: Boolean
  billing_scheme: String
  created: Int
  currency: String
  livemode: Boolean
  lookup_key: String
  metadata: String
  nickname: String
  product: String
  recurring: Recurring
  tiers_mode: String
  transform_quantity: String
  type: String
  unit_amount: Int
  unit_amount_decimal: String
}
type SubscriptionInfoResult {
  data: SubscriptionInfo
  error: ErrorResponse
}
type CouponInfo {
  id: String
  object: String
  amount_off: Int
  created: Int
  currency: String
  duration: String
  duration_in_months: Int
  livemode: Boolean
  max_redemptions: Int
  name: String
  percent_off: Float
  redeem_by: Int
  times_redeemed: Int
  valid: Boolean
}
type ValidatePromoCodeResult {
  data: CouponInfo
  error: ErrorResponse
}
input CreateStripeSubscriptionInput {
  paymentMethodId: String
  email: String
  coupon: String
}
input ValidatePromoCodeInput {
  coupon: String
}
type User
  @model
  @key(
    name: "usersByUserId"
    fields: ["cognitoUserName", "lastName"]
    queryField: "usersByUserId"
  )
  @key(
    name: "usersByUserEmail"
    fields: ["email", "lastName"]
    queryField: "usersByUserEmail"
  )
  @key(
    name: "usersByUserResetToken"
    fields: ["code", "lastName"]
    queryField: "usersByUserResetToken"
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  cognitoUserName: String!
  firstName: String
  lastName: String
  company: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String!
  signature: String
  receiveEmail: Boolean
  code: String!
}
type Prospect
  @model
  @key(
    name: "prospectsByUserId"
    fields: ["userId", "prospectListId"]
    queryField: "prospectsByUserId"
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  userId: ID!
  prospectListId: ID!
  # personal info
  status: String
  firstName: String
  lastName: String
  company: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  phone: String
  email: String
  facebook: String
  notes: String
  interested: String
  enhance: Boolean
  fetched: Boolean
  # Demographic data info
  demographic: DemographicInfo
  # Lifestyle data info
  lifestyle: LifestyleInfo
  prospectList: ProspectList @connection(fields: ["prospectListId"])
}
type ProspectList
  @key(
    name: "prospectListsByUserId"
    fields: ["userId", "name"]
    queryField: "prospectListsByUserId"
  )
  @model
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  userId: ID!
  name: String
  enhance: Boolean
}
type ErrorResponse {
  message: String
}
type PaymentMethodData {
  address: String
  name: String
  email: String
  phone: String
  paymentMethodId: String
  subscriptionId: String
  customerId: String
  subscriptionType: String
  discount: Int
  unitAmount: Int
}
type PaymentMethodResult {
  data: PaymentMethodData
  error: ErrorResponse
}
type PaymentMethod @model @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  address: String
  name: String
  email: String
  phone: String
  paymentMethodId: String
  subscriptionId: String
  customerId: String
  cardType: String
  expMonth: Int
  expYear: Int
  last4: String
  subscriptionType: String
  discount: String
  unitAmount: Int
}
type DateType {
  day: Int
  month: Int
  year: Int
  hour: Int
  minute: Int
  am: String
}
type EmailType {
  prospects: Int
  message: String
}
type TextType {
  prospects: Int
  text: String
}
type RinglessVoicemailType {
  prospects: Int
  file: String
  phone: String
}
type PostCardType {
  prospects: Int
  file: String
}
type SocialPostType {
  prospects: Int
  image: String
  content: String
}
type CheckoutType {
  brand: String
  last4: String
  total: Float
  discount: Float
  email: String
}
type MarketingCampaign
  @model
  @key(
    name: "campaignsByUserId"
    fields: ["userId", "createdAt"]
    queryField: "campaignsByUserId"
  )
  @auth(rules: [{ allow: public, provider: apiKey }]) {
  id: ID!
  userId: ID!
  title: String
  prospectListId: ID
  startDateTime: DateType
  automatedEmail: EmailType
  automatedText: TextType
  automatedRinglessVoiceMail: RinglessVoicemailType
  automatedPostcard: PostCardType
  automatedSocialPost: SocialPostType
  checkout: CheckoutType
  prospectList: ProspectList @connection(fields: ["prospectListId"])
  createdAt: String!
}